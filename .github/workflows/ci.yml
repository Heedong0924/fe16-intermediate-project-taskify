name: CI Checks

on:
  pull_request:
    branches:
      - main # main 브랜치로 PR이 열릴 때
      - dev # develop 브랜치로 PR이 열릴 때
      - release/* # release/ 로 시작하는 브랜치로 PR이 열릴 때

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest # 워크플로우가 실행될 환경

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 레포지토리 코드 체크아웃

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10 # 사용하는 pnpm 버전에 맞춰 설정
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "PNPM_CACHE_DIR=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.PNPM_CACHE_DIR }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint # 프로젝트의 lint 스크립트 실행 (package.json의 scripts에 "lint": "eslint ." 등 설정되어 있어야 함)

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: lint # lint 작업이 성공적으로 완료된 후에 build 작업이 실행되도록 설정

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "PNPM_CACHE_DIR=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.PNPM_CACHE_DIR }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Next.js project
        run: pnpm build # 프로젝트의 build 스크립트 실행 (package.json의 scripts에 "build": "next build" 등 설정되어 있어야 함)
